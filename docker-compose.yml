version: "3.9"
services:
  frontend:
    container_name: app_frontend
    build: ./front-end
    ports:
      - 3000:3000
    platform: linux/x86_64
    working_dir: /app-frontend
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./front-end:/app-frontend
      - /app-frontend/node_modules
    environment:
      - ESLINT_NO_DEV_ERRORS=true
      - SKIP_PREFLIGHT_CHECK=true
      #COMUNICAÇÃO COM A API
      - REACT_APP_HOSTNAME=localhost
      - REACT_APP_BACKEND_PORT=3001
    # Os `healthcheck` devem garantir que a aplicação
    # está operacional, antes de liberar o container
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"] # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5
  backend:
    container_name: app_backend
    build: ./back-end
    ports:
      - 3001:3001
    platform: linux/x86_64
    working_dir: /app-backend
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./back-end:/app-backend
      - /app-backend/node_modules
    environment:
      # - NODE_ENV=development
      - API_PORT=3001
      - JWT_SECRET=jwt_secret
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - MYSQL_USER=root
      - MYSQL_PASSWORD=123456
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - MYSQL_DB_NAME=delivery-app
      - EVAL_ALWAYS_RESTORE_DEV_DB=true
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
  db:
    image: mysql:8.0.21
    container_name: db
    platform: linux/x86_64
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    restart: "always"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores
